<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Monster Survival Game</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: #222;
      color: white;
      font-family: Arial, sans-serif;
    }
    canvas {
      display: block;
    }
    #hud {
      position: absolute;
      top: 10px;
      left: 10px;
      font-size: 18px;
    }
    #score {
      color: lime;
    }
    #loseScreen {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 48px;
      color: red;
      display: none;
      text-align: center;
    }
    #finalScore {
      color: lime;
      font-size: 24px;
      margin-bottom: 10px;
    }
    #restartBtn {
      padding: 10px 20px;
      font-size: 20px;
      background: #333;
      color: white;
      border: 2px solid lime;
      cursor: pointer;
    }
    #restartBtn:hover {
      background: #444;
    }
  </style>
</head>
<body>
  <div id="hud">
    HP: <span id="hp">50</span><br>
    Punkty: <span id="score">0</span><br>
    Level: <span id="Level">1</span>
  </div>
  <div id="loseScreen">
    <div id="finalScore"></div>
    <div id="loseText">You Lose</div>
    <button id="restartBtn">Restart</button>
  </div>
  <canvas id="gameCanvas" tabindex="0"></canvas>
  <script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    canvas.focus();

    let player;
    let monsters = [];
    let bullets = [];
    let heals = [];
    let score = 0;
    let paused = false;
    let level = 1;

    const healSound = new Audio('https://www.soundjay.com/buttons/sounds/button-09.mp3');
    const shootSound = new Audio('https://www.soundjay.com/mechanical/sounds/mechanical-click-07.mp3');
    const hitSound = new Audio('https://www.soundjay.com/button/beep-07.wav');

    const monsterTypes = [
      { name: "weak", color: "red", size: 15, speed: 1.5, damage: 0.5 },
      { name: "normal", color: "orange", size: 20, speed: 1, damage: 1 },
      { name: "tank", color: "purple", size: 30, speed: 0.5, damage: 2 }
    ];

    function initGame() {
      player = {
        x: canvas.width / 2,
        y: canvas.height / 2,
        size: 20,
        speed: 4,
        hp: 100,
        color: level === 1 ? 'lime' : 'blue'
      };
      monsters = [];
      bullets = [];
      heals = [];
      score = 0;
      paused = false;
      document.getElementById('hp').textContent = player.hp;
      document.getElementById('score').textContent = score;
      document.getElementById('Level').textContent = level;
      document.getElementById('loseScreen').style.display = 'none';
      document.getElementById('loseText').textContent = 'You Lose';
      document.getElementById('restartBtn').textContent = 'Restart';
    }

    function spawnMonster() {
      if (player.hp <= 0 || paused) return;
      const angle = Math.random() * Math.PI * 2;
      const distance = 300;
      const x = player.x + Math.cos(angle) * distance;
      const y = player.y + Math.sin(angle) * distance;
      const type = monsterTypes[Math.floor(Math.random() * monsterTypes.length)];
      monsters.push({ x, y, ...type });
    }

    function spawnHeal() {
      if (player.hp <= 0 || paused) return;
      const x = Math.random() * canvas.width;
      const y = Math.random() * canvas.height;
      heals.push({ x, y, size: 15, alpha: 1, pulseDir: 1 });
    }

    function drawHeals() {
      for (const h of heals) {
        ctx.save();
        ctx.globalAlpha = h.alpha;
        ctx.fillStyle = 'lightgreen';
        ctx.beginPath();
        ctx.arc(h.x, h.y, h.size, 0, Math.PI * 2);
        ctx.fill();
        ctx.restore();

        h.alpha += h.pulseDir * 0.02;
        if (h.alpha >= 1) h.pulseDir = -1;
        if (h.alpha <= 0.5) h.pulseDir = 1;
      }
    }

    function drawPlayer() {
      ctx.fillStyle = player.color;
      ctx.beginPath();
      ctx.arc(player.x, player.y, player.size, 0, Math.PI * 2);
      ctx.fill();
    }

    function drawMonsters() {
      for (const m of monsters) {
        ctx.fillStyle = m.color;
        ctx.beginPath();
        ctx.arc(m.x, m.y, m.size, 0, Math.PI * 2);
        ctx.fill();
      }
    }

    function drawBullets() {
      ctx.fillStyle = 'yellow';
      for (const b of bullets) {
        ctx.beginPath();
        ctx.arc(b.x, b.y, 5, 0, Math.PI * 2);
        ctx.fill();
      }
    }

    function moveMonsters() {
      for (const m of monsters) {
        const dx = player.x - m.x;
        const dy = player.y - m.y;
        const dist = Math.hypot(dx, dy);
        m.x += (dx / dist) * m.speed;
        m.y += (dy / dist) * m.speed;

        if (dist < player.size + m.size) {
          player.hp -= m.damage;
          document.getElementById('hp').textContent = Math.max(0, Math.floor(player.hp));
        }
      }
    }

    function updateBullets() {
      for (let i = bullets.length - 1; i >= 0; i--) {
        const b = bullets[i];
        b.x += b.vx;
        b.y += b.vy;

        for (let j = monsters.length - 1; j >= 0; j--) {
          const m = monsters[j];
          const dist = Math.hypot(b.x - m.x, b.y - m.y);
          if (dist < m.size) {
            hitSound.play();
            monsters.splice(j, 1);
            bullets.splice(i, 1);

            score += m.color === 'purple' ? 10 : m.color === 'orange' ? 5 : 1;
            document.getElementById('score').textContent = score;

            if (score >= 100) {
              paused = true;
              document.getElementById('finalScore').textContent = 'Punkty: ' + score;
              document.getElementById('loseText').textContent = 'You Win!';
              document.getElementById('restartBtn').textContent = 'Next Level';
              document.getElementById('loseScreen').style.display = 'block';
            }
            break;
          }
        }
      }
    }

    function checkHealPickup() {
      for (let i = heals.length - 1; i >= 0; i--) {
        const h = heals[i];
        const dist = Math.hypot(h.x - player.x, h.y - player.y);
        if (dist < h.size + player.size) {
          healSound.play();
          player.hp = Math.min(100, player.hp + 10);
          document.getElementById('hp').textContent = player.hp;
          heals.splice(i, 1);
        }
      }
    }

    function shoot(x, y) {
      if (player.hp <= 0 || paused) return;
      const dx = x - player.x;
      const dy = y - player.y;
      const dist = Math.hypot(dx, dy);
      const speed = 8;
      bullets.push({
        x: player.x,
        y: player.y,
        vx: (dx / dist) * speed,
        vy: (dy / dist) * speed
      });
      shootSound.play();
    }

    window.addEventListener('click', e => shoot(e.clientX, e.clientY));

    const keys = {};
    window.addEventListener('keydown', e => {
      keys[e.key.toLowerCase()] = true;
      if (e.key === 'Escape') togglePause();
    });
    window.addEventListener('keyup', e => keys[e.key.toLowerCase()] = false);

    function movePlayer() {
      if (player.hp <= 0 || paused) return;
      if (keys['w']) player.y -= player.speed;
      if (keys['s']) player.y += player.speed;
      if (keys['a']) player.x -= player.speed;
      if (keys['d']) player.x += player.speed;
      player.x = Math.max(player.size, Math.min(canvas.width - player.size, player.x));
      player.y = Math.max(player.size, Math.min(canvas.height - player.size, player.y));
    }

    function togglePause() {
      if (player.hp <= 0) return;
      paused = !paused;
      if (paused) {
        document.getElementById('finalScore').textContent = 'Punkty: ' + score;
        document.getElementById('loseText').textContent = 'Stop';
        document.getElementById('restartBtn').textContent = 'Play';
        document.getElementById('loseScreen').style.display = 'block';
      } else {
        document.getElementById('loseScreen').style.display = 'none';
      }
    }

    document.getElementById('restartBtn').addEventListener('click', () => {
      if (paused) {
        if (score >= 100) {
          level++;
          initGame();
        } else {
          paused = false;
          document.getElementById('loseScreen').style.display = 'none';
        }
      } else {
        initGame();
      }
    });

    function gameLoop() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      if (player.hp > 0 && !paused) {
        drawPlayer();
        drawMonsters();
        drawBullets();
        drawHeals();
        movePlayer();
        moveMonsters();
        updateBullets();
        checkHealPickup();
      } else if (player.hp <= 0) {
        document.getElementById('finalScore').textContent = 'Punkty: ' + score;
        document.getElementById('loseText').textContent = 'You Lose';
        document.getElementById('restartBtn').textContent = 'Restart';
        document.getElementById('loseScreen').style.display = 'block';
      }
      requestAnimationFrame(gameLoop);
    }

    setInterval(spawnMonster, 2000);
    setInterval(spawnHeal, 10000);
    initGame();
    gameLoop();
  </script>
</body>
</html>
